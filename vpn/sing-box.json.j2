{% set config = lookup('file', config_file | default('config.json')) | from_json %}
{
  "log": { "level": "info" },
  "inbounds": [
    {
      "type": "hysteria2",
      "tag": "hysteria2-in",
      "listen": "0.0.0.0",
      "listen_port": {{ hysteria2_port | default(47012) }},
      "users": [
        {% for user in config.users %}
            { "name": "{{ user }}", 
              "password": "{{ (user + '.' + salt) | hash('sha256') }}"
            }{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "obfs": {
        "type": "salamander",
        "password": "{{ obfs_password }}"
      },
      "ignore_client_bandwidth": true,
      "tls": {
        "enabled": true,
        "alpn": ["h3"],
        "certificate_path": "/etc/xray/certs/cert.pem",
        "key_path": "/etc/xray/certs/key.pem"
      }
    },
    {
      "type": "vless",
      "tag": "vless-in",
      "listen": "0.0.0.0",
      "listen_port": {{ vless_port | default(8443) }},
      "sniff": true,
      "sniff_override_destination": true,
      "domain_strategy": "prefer_ipv4",
      "users": [
        {% for user in config.users %}
        {
          "name": "{{ user }}",
          "uuid": "{{ (user + '.' + salt) | hash('sha256') | string | truncate(32, true, '') | regex_replace('^(.{8})(.{4})(.{4})(.{4})(.{12})$', '\\1-\\2-\\3-\\4-\\5') }}",
          "flow": "xtls-rprx-vision"
        }{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "tls": {
        "enabled": true,
        "alpn": [],
        "server_name": "ok.ru",
        "reality": {
          "enabled": true,
          "handshake": {
            "server": "ok.ru",
            "server_port": 443
          },
          "private_key": "{{ reality_private_key | default('') }}",
          "short_id": ["{{ reality_short_id | default('c047f3e99c90ff71') }}"],
          "max_time_difference": "10m"
        }
      }
    }
  ],
  {% set proxy_cfg = (config.get('proxy') if config is mapping else none) %}
  {% set host_cfg = (proxy_cfg.get(ansible_host) if proxy_cfg is mapping and proxy_cfg.get(ansible_host) else none) %}
  {% set features = (host_cfg.get('features') if host_cfg is mapping else none) %}
  {% set forward_group = (features.get('forward-nonru') if features is mapping else none) %}
  {% set forward_il_group = (features.get('forward-il') if features is mapping else none) %}
  {% if (forward_group and config.subs.get(forward_group)) or (forward_il_group and config.subs.get(forward_il_group)) %}
  "outbounds": [
    { "type": "direct", "tag": "direct-out" },
    {% if forward_group and config.subs.get(forward_group) %}
    {
      "type": "urltest",
      "tag": "auto",
      "outbounds": [
        {% set hy_tags = [] %}
        {% for name, item in config.subs[forward_group].items() %}
          {% if item.protocol | lower | regex_search('^hy2') %}
            {% set _ = hy_tags.append(item.host) %}
          {% endif %}
        {% endfor %}
        {% for tag in hy_tags %}
        "{{ tag }}"{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "interrupt_exist_connections": false
    }{% if forward_il_group and config.subs.get(forward_il_group) %},{% endif %}
    {% endif %}
    {% if forward_il_group and config.subs.get(forward_il_group) %}
    {
      "type": "urltest",
      "tag": "auto-il",
      "outbounds": [
        {% set hy_il_tags = [] %}
        {% for name, item in config.subs[forward_il_group].items() %}
          {% if item.protocol | lower | regex_search('^hy2') %}
            {% set _ = hy_il_tags.append(item.host) %}
          {% endif %}
        {% endfor %}
        {% for tag in hy_il_tags %}
        "{{ tag }}"{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "interrupt_exist_connections": false
    }
    {% endif %}
    {% if forward_group and config.subs.get(forward_group) %}
    {% for name, item in config.subs[forward_group].items() %}
      {% if item.protocol | lower | regex_search('^hy2') %}
    ,
    {
      "type": "hysteria2",
      "tag": "{{ item.host }}",
      "server": "{{ item.host }}",
      "server_port": {{ hysteria2_port | default(47012) }},
      "password": "{{ ('system' + '.' + salt) | hash('sha256') }}",
      "obfs": {
        "type": "salamander",
        "password": "{{ obfs_password }}"
      },
      "tls": {
        "enabled": true,
        "alpn": ["h3"],
        "insecure": true
      }
    }
      {% endif %}
    {% endfor %}
    {% endif %}
    {% if forward_il_group and config.subs.get(forward_il_group) %}
    {% for name, item in config.subs[forward_il_group].items() %}
      {% if item.protocol | lower | regex_search('^hy2') %}
    ,
    {
      "type": "hysteria2",
      "tag": "{{ item.host }}",
      "server": "{{ item.host }}",
      "server_port": {{ hysteria2_port | default(47012) }},
      "password": "{{ ('system' + '.' + salt) | hash('sha256') }}",
      "obfs": {
        "type": "salamander",
        "password": "{{ obfs_password }}"
      },
      "tls": {
        "enabled": true,
        "alpn": ["h3"],
        "insecure": true
      }
    }
      {% endif %}
    {% endfor %}
    {% endif %}
  ],
  "route": {
    "rules": [
      { "ip_is_private": true, "outbound": "direct-out" },
      { "rule_set": "geoip-ru", "outbound": "direct-out" },
      { "rule_set": "domain-ru", "outbound": "direct-out" },
      {% if forward_il_group and config.subs.get(forward_il_group) %}
      { "rule_set": "geoip-il", "outbound": "auto-il" },
      { "rule_set": "domain-il", "outbound": "auto-il" }
      {% else %}
      { "rule_set": "geoip-il", "outbound": "direct-out" },
      { "rule_set": "domain-il", "outbound": "direct-out" }
      {% endif %}
    ],
    "rule_set": [
      {
        "tag": "geoip-ru",
        "type": "remote",
        "format": "binary",
        "url": "https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-ru.srs",
        "download_detour": "auto"
      },
      {
        "tag": "domain-ru",
        "type": "inline",
        "rules": [ { "domain_suffix": [".ru"] } ]
      },
            {
        "tag": "geoip-il",
        "type": "remote",
        "format": "binary",
        "url": "https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-il.srs",
        "download_detour": "auto"
      },
      {
        "tag": "domain-il",
        "type": "inline",
        "rules": [ { "domain_suffix": [".il"] } ]
      }

    ],
    "final": {% if forward_group and config.subs.get(forward_group) %}"auto"{% elif forward_il_group and config.subs.get(forward_il_group) %}"auto-il"{% else %}"direct-out"{% endif %}
  }
  {% else %}
  "outbounds": [{ "type": "direct" }]
  {% endif %}
}
